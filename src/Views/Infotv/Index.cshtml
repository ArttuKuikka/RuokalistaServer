@using RuokalistaServer
@model RuokalistaServer.ViewModels.InfoTVViewModel;
<!DOCTYPE html>
<html lang="en">
<head>
    
    <meta charset="utf-8" />
    <title>InfoTV - @GlobalConfig.BrandingName</title>
    <style>

		.highlighted {
            font-weight: bold;
			color: @GlobalConfig.PrimaryColor !important;
		}

		.infotv_bg {
			height: 100%;
			width: 100%;
			object-fit: cover;
			z-index: 1;
			position: absolute;
			top: 0;
			left: 0;
		}

		.template {
			height: 100%;
			width: 100%;
			margin: auto;
			overflow: hidden;
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: center;
			z-index: 2;
			position: absolute;
			top: 0;
			left: 0;
			opacity: 0.85;
		}

		.ruokacontainer {
			
			z-index: 3;
			position: absolute;
			top: 10px;
			left: 10px;
			bottom: 10px;
			width: 73.5%;
			height: 99%;
		}
		.daytitle{
			font-weight: bold;
			font-size: 2.5vw;
		}

		.autosize {
			text-align: center;
			margin: 10px 0;
		}

		.ruokateksti{
			margin-bottom: 20px;
		}


	</style>
    <script src="/js/aanestys.js"></script>
    <script src="/js/infotv.js"></script>
    <link rel="stylesheet" href="/css/aanestys.css">
    <link rel="stylesheet" href="/css/site.css">

    <script>
		fetch('/infotv/GetBgForWeek?week=@Model.Week')
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.json();
			})
			.then(data => {
				console.log('Bg url = ' + data.fileName);
				document.getElementById('Background-image').src = data.fileName;


			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});


		function showPreview(event) {
			var input = event.target;
			var reader = new FileReader();
			reader.onload = function () {
				var image = document.getElementById('bg');
				image.src = reader.result;
			};
			reader.readAsDataURL(input.files[0]);
		}
		function scaleTextToFit(container) {
				const autosizeElements = Array.from(container.querySelectorAll('.autosize'));
				if (autosizeElements.length === 0) return;

				let fontSize = 20; // start small
				const parentWidth = container.clientWidth;
				const parentHeight = container.clientHeight;

				// Reset font-size first
				autosizeElements.forEach(el => el.style.fontSize = fontSize + 'px');

				// Grow until overflow
				while (true) {
					fontSize++;
					autosizeElements.forEach(el => el.style.fontSize = fontSize + 'px');

					// Calculate total height including margins
					let totalHeight = 0;
					autosizeElements.forEach(el => {
						const style = window.getComputedStyle(el);
						const marginTop = parseFloat(style.marginTop);
						const marginBottom = parseFloat(style.marginBottom);
						totalHeight += el.offsetHeight + marginTop + marginBottom;
					});

					// Check width overflow
					let widthOverflow = autosizeElements.some(el => el.scrollWidth > parentWidth);

					// If total height or width is too much, stop
					if (totalHeight > parentHeight || widthOverflow) {
						fontSize--;
						autosizeElements.forEach(el => el.style.fontSize = fontSize + 'px');
						break;
					}
				}
			}

			window.addEventListener('load', () => {
				const container = document.querySelector('.ruokacontainer');
				scaleTextToFit(container);
			});

			window.addEventListener('resize', () => {
				const container = document.querySelector('.ruokacontainer');
				scaleTextToFit(container);
			});

		//luo votebar
		document.addEventListener("DOMContentLoaded", function () {

			 

			
			var aanestysbox = document.getElementById("aanestysbox");
			
			var showBool = @Html.Raw(Model.ShowingCurrentWeeksMenu.ToString()?.ToLower());
			var weekid = @Model.Week;
			var year = @Model.Ruokalista?.Year;

			createInfoTvVoteBar(aanestysbox, showBool, weekid, year);

			//päivitä votebar 5 min välein
			setInterval(() => {
				// Get current time
				const currentTime = new Date();

				// Extract hours and minutes
				const hours = currentTime.getHours();
				const minutes = currentTime.getMinutes();

				

				// Check if the current time is between 10:10 AM and 12:10 PM
				if (hours === 10 && minutes >= 5 && hours < 12) {
					
					createInfoTvVoteBar(aanestysbox, showBool, weekid, year);
					
				}
				
			}, 300000);
			
});


		

	</script>

</head>
<body style="background-color: #2c2f33">
<img id="Background-image" class="infotv_bg" src="~/samplebg_infotv.jpg" />
<img class="template" src="~/infotv_template_bk.png" />
<div class="ruokacontainer" style=" text-align:center; color:white; font-family:'Ruokalistafont'">

    @{
        if (Model.Ruokalista != null)
        {
            @if(Model.ShowingCurrentWeeksMenu && Model.ShowingKasvisruokalista)
            {
                <div style="font-size:3.8vw; font-weight:bold; margin-bottom:10px">Tämän viikon(@Model.Ruokalista.WeekId) kasvisruokalista</div>
            }
            else if(Model.ShowingNextWeeksMenu && Model.ShowingKasvisruokalista)
            {
                <div style="font-size:3.8vw; font-weight:bold">Seuraavan viikon(@Model.Ruokalista.WeekId) kasvisruokalistaruokalista</div>
            }
            else if (Model.ShowingKasvisruokalista)
            {
                <div style="font-size:3.8vw; font-weight:bold">Viikon(@Model.Ruokalista.WeekId) kasvisruokalista</div>
            }
            else if (Model.ShowingNextWeeksMenu)
            {
                <div style="font-size:3.8vw; font-weight:bold; margin-bottom:10px">Seuraavan viikon(@Model.Ruokalista.WeekId) ruokalista</div>
            }
            else if(Model.ShowingCurrentWeeksMenu)
            {
                <div style="font-size:3.8vw; font-weight:bold">Tämän viikon(@Model.Ruokalista.WeekId) ruokalista</div>
            }
            else
            {
                <div style="font-size:3.8vw; font-weight:bold">Viikon(@Model.Ruokalista.WeekId) ruokalista</div>
            }




            <div class="@(Model.ShowingCurrentWeeksMenu && DateTime.Now.DayOfWeek == DayOfWeek.Monday ? "highlighted" : "")">
                <div class="autosize">Maanantai</div>
                <div class="autosize ruokateksti">@Model.Ruokalista.Maanantai</div>
            </div>

            <div class="@(Model.ShowingCurrentWeeksMenu && DateTime.Now.DayOfWeek == DayOfWeek.Tuesday ? "highlighted" : "")">
                <div class="autosize">Tiistai</div>
                <div class="autosize ruokateksti">@Model.Ruokalista.Tiistai</div>
            </div>

            <div class="@(Model.ShowingCurrentWeeksMenu && DateTime.Now.DayOfWeek == DayOfWeek.Wednesday ? "highlighted" : "")">
                <div class="autosize">Keskiviikko</div>
                <div class="autosize ruokateksti">@Model.Ruokalista.Keskiviikko</div>
            </div>

            <div class="@(Model.ShowingCurrentWeeksMenu && DateTime.Now.DayOfWeek == DayOfWeek.Thursday ? "highlighted" : "")">
                <div class="autosize">Torstai</div>
                <div class="autosize ruokateksti">@Model.Ruokalista.Torstai</div>
            </div>

            <div class="@(Model.ShowingCurrentWeeksMenu && DateTime.Now.DayOfWeek == DayOfWeek.Friday ? "highlighted" : "")">
                <div class="autosize">Perjantai</div>
                <div class="autosize ruokateksti">@Model.Ruokalista.Perjantai</div>
            </div>
				
        }
        else
        {
            <h1 style="font-size:4vw">Tämän viikon ruokalistaa ei vielä ole</h1>
        }

    }
</div>
<img src="@Environment.GetEnvironmentVariable("InfoTV_Mainos_URL")" style="width:19vw; height:28vw; position:absolute; bottom:0px; right:10px; z-index:4" />


<div id="aanestysbox" style="top:5px; right:5px; z-index:4; position: absolute;  width:24vw; height: 10vw; background-color: #222; border-radius: 10px; opacity:80%; text-align:center;">
    <h2 class="infotv-title">Tämän päivän äänestystulokset</h2>
    <h4 id="voteCounter" class="voteCountTitle" style="font-size: 1.2em">0 ääntä</h4>
</div>
	
</body>
</html>

