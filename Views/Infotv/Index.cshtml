@model RuokalistaServer.ViewModels.InfoTVViewModel;
<head>

	<style>
		.infotv_bg {
			height: 100%;
			width: 100%;
			object-fit: cover;
			z-index: 1;
			position: absolute;
			top: 0;
			left: 0;
		}

		.template {
			height: 100%;
			width: 100%;
			object-fit: fill;
			z-index: 2;
			position: absolute;
			top: 0;
			left: 0;
			opacity: 0.85;
		}

		.ruokacontainer {
			
			z-index: 3;
			position: absolute;
			top: 10px;
			left: 10px;
			bottom: 10px;
			width: 73.5%;
		}
		.daytitle{
			font-weight: bold;
			font-size: 2.5vw;
		}

		.ruokateksti{
			font-size: 2.3vw;
			margin-bottom: 10px;
		}


	</style>
	<script src="/js/aanestys.js"></script>
	<script src="/js/infotv.js"></script>
	<link rel="stylesheet" href="/css/aanestys.css">
	<link rel="stylesheet" href="/css/site.css">

	<script>
		fetch('/infotv/GetBgForWeek?week=@Model.Week')
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.json();
			})
			.then(data => {
				console.log('Bg url = ' + data.fileName);
				document.getElementById('Background-image').src = data.fileName;


			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});


		function showPreview(event) {
			var input = event.target;
			var reader = new FileReader();
			reader.onload = function () {
				var image = document.getElementById('bg');
				image.src = reader.result;
			};
			reader.readAsDataURL(input.files[0]);
		}

		const isOverflown = ({ clientHeight, scrollHeight }) => scrollHeight > clientHeight
		const resizeText = ({ element, elements, minSize = 1.2, maxSize = 3.3, step = 1, unit = 'vw' }) => {
			(elements || [element]).forEach(el => {
				let i = minSize
				let overflow = false

				const parent = el.parentNode

				while (!overflow && i < maxSize) {
					el.style.fontSize = `${i}${unit}`
					overflow = isOverflown(parent)

					if (!overflow) i += step
				}

				// revert to last state where no overflow happened
				el.style.fontSize = `${i - step}${unit}`
			})
		}

		window.addEventListener("resize", function () {
			console.log("resizing");
			resizeText({
				elements: document.querySelectorAll('.autosize'),
				step: 0.1
			});
			
		});

		document.addEventListener("DOMContentLoaded", function () {
			resizeText({
				elements: document.querySelectorAll('.autosize'),
				step: 0.1
			});

		});

		//luo votebar
		document.addEventListener("DOMContentLoaded", function () {

			 

			
			var aanestysbox = document.getElementById("aanestysbox");
			
			var showBool = @Html.Raw(Model.ShowingCurrentWeeksMenu.ToString()?.ToLower());
			var weekid = @Model.Week;
			var year = @Model.Ruokalista?.Year;

			createInfoTvVoteBar(aanestysbox, showBool, weekid, year);

			//päivitä votebar 5 min välein
			setInterval(() => {
				// Get current time
				const currentTime = new Date();

				// Extract hours and minutes
				const hours = currentTime.getHours();
				const minutes = currentTime.getMinutes();

				

				// Check if the current time is between 10:10 AM and 12:10 PM
				if (hours === 10 && minutes >= 5 && hours < 12) {
					
					createInfoTvVoteBar(aanestysbox, showBool, weekid, year);
					
				}
				
			}, 300000);
			
});


		

	</script>

</head>
<body style="background-color: #2c2f33">
	<img id="Background-image" class="infotv_bg" src="~/samplebg_infotv.jpg" />
	<img class="template" src="~/infotv_template_bk.png" />
	<div class="ruokacontainer" style=" text-align:center; color:white; font-family:'Ruokalistafont'">

		@{
			if (Model.Ruokalista != null)
					{
								@if (Model.ShowingNextWeeksMenu)
				{
											<div style="font-size:3.8vw; font-weight:bold; margin-bottom:10px">Seuraavan viikon(@Model.Ruokalista.WeekId) ruokalista</div>
				}
				else if(Model.ShowingCurrentWeeksMenu)
						{
					<div style="font-size:3.8vw; font-weight:bold">Tämän viikon(@Model.Ruokalista.WeekId) ruokalista</div>
				}
				else
				{
					<div style="font-size:3.8vw; font-weight:bold">Viikon(@Model.Ruokalista.WeekId) ruokalista</div>
				}




				<div class="@(Model.ShowingCurrentWeeksMenu && DateTime.Now.DayOfWeek == DayOfWeek.Monday ? "highlighted" : "")">
					<div class="autosize daytitle">Maanantai</div>
					<div class="autosize ruokateksti">@Model.Ruokalista.Maanantai</div>
				</div>

				<div class="@(Model.ShowingCurrentWeeksMenu && DateTime.Now.DayOfWeek == DayOfWeek.Tuesday ? "highlighted" : "")">
					<div class="autosize daytitle">Tiistai</div>
					<div class="autosize ruokateksti">@Model.Ruokalista.Tiistai</div>
				</div>

				<div class="@(Model.ShowingCurrentWeeksMenu && DateTime.Now.DayOfWeek == DayOfWeek.Wednesday ? "highlighted" : "")">
					<div class="autosize daytitle">Keskiviikko</div>
					<div class="autosize ruokateksti">@Model.Ruokalista.Keskiviikko</div>
				</div>

				<div class="@(Model.ShowingCurrentWeeksMenu && DateTime.Now.DayOfWeek == DayOfWeek.Thursday ? "highlighted" : "")">
					<div class="autosize daytitle">Torstai</div>
					<div class="autosize ruokateksti">@Model.Ruokalista.Torstai</div>
				</div>

				<div class="@(Model.ShowingCurrentWeeksMenu && DateTime.Now.DayOfWeek == DayOfWeek.Friday ? "highlighted" : "")">
					<div class="autosize daytitle">Perjantai</div>
					<div class="autosize ruokateksti">@Model.Ruokalista.Perjantai</div>
				</div>
				
			}
			else
					{
								<h1 style="font-size:4vw">Tämän viikon ruokalistaa ei vielä ole</h1>
			}

		}
	</div>
	<img src="~/mainos3.png" style="width:19vw; height:25vw; position:absolute; bottom:50px; right:10px; z-index:4" />
	<img src="~/ig.png" style="width:19vw; height:3vw; position:absolute; bottom:0px; right:10px; z-index:4" />

	<div id="aanestysbox" style="top:5px; right:5px; z-index:4; position: absolute;  width:24vw; height: 10vw; background-color: #222; border-radius: 10px; opacity:80%; text-align:center;">
		<h2 class="infotv-title">Tämän päivän äänestystulokset</h2>
		<h4 id="voteCounter" class="voteCountTitle" style="font-size: 1.2em">0 ääntä</h4>
	</div>
	
</body>

