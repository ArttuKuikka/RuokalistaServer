<!DOCTYPE html>
<html>
<head>
	<style>
		.container {
		}

		.image1 {
			position: absolute;
			top: 0;
			left: 0;
			z-index: 1;
		}

		.image2 {
			position: absolute;
			top: 0;
			left: 0;
			z-index: 2;
		}

		.viikkotxt {
			position: fixed;
			top: -50px;
			left: 10px;
			z-index: 3;
			font-size: 12em;
			margin: 0px;
			font-family: 'Open Sans', sans-serif;
		}

		.viikkonpaivattxt {
			position: fixed;
			top: 60px;
			left: 220px;
			z-index: 3;
			font-size: 1.8em;
			margin: 0px;
			font-family: 'Open Sans', sans-serif;
		}

		.ruokatekstit {
			position: fixed;
			top: 170px;
			left: 380px;
			z-index: 4;
			font-size: 3.2em;
			margin: 0px;
			font-family: 'Open Sans', sans-serif;
			max-width: 700px;
		}

		.viikonpaiva {
			position: fixed;
			width: 680px;
			height: 150px;
			display: block;
			
		}

		.maanantai {
			top: 185px;
			left: 385px;
		}

		.tiistai {
			top: 360px;
			left: 385px;
		}

		.keskiviikko {
			top: 540px;
			left: 385px;
		}

		.torstai {
			top: 720px;
			left: 385px;
		}

		.perjantai {
			top: 900px;
			left: 385px;
		}
	</style>

	<script>
		function showPreview(event) {
			var input = event.target;
			var reader = new FileReader();
			reader.onload = function () {
				var image = document.getElementById('bg');
				image.src = reader.result;
			};
			reader.readAsDataURL(input.files[0]);
		}

		const isOverflown = ({ clientHeight, scrollHeight }) => scrollHeight > clientHeight
		const resizeText = ({ element, elements, minSize = 10, maxSize = 50, step = 1, unit = 'px' }) => {
			(elements || [element]).forEach(el => {
				let i = minSize
				let overflow = false

				const parent = el.parentNode

				while (!overflow && i < maxSize) {
					el.style.fontSize = `${i}${unit}`
					overflow = isOverflown(parent)

					if (!overflow) i += step
				}

				// revert to last state where no overflow happened
				el.style.fontSize = `${i - step}${unit}`
			})
		}

		document.addEventListener("DOMContentLoaded", function () {
			resizeText({
				elements: document.querySelectorAll('.ruokatext'),
				step: 0.5
			});

			fetch('/infotv/GetBgForWeek?week=@ViewBag.Viikko')
				.then(response => {
					if (!response.ok) {
						throw new Error('Network response was not ok');
					}
					return response.json();
				})
				.then(data => {
					console.log('Bg url = ' + data.fileName);
					document.getElementById('bg').src = data.fileName;


				})
				.catch(error => {
					console.error('There was a problem with the fetch operation:', error);
				});

		});

	</script>

</head>

@{
	RuokalistaServer.Models.Ruokalista ruoka = ViewBag.ruokalista;
<body>

	<div class="container">

		<img src="/sample_bg.jpg" alt="Image 1" id="bg" class="image1" width="1080" height="1080" style="object-fit: cover">
		<img src="/pohja.png" alt="Image 2" class="image2">
		<p class="viikkotxt">@ViewBag.Viikko</p>
			<p class="viikkonpaivattxt">@ViewBag.Paivat</p>

		<div class="ruokatekstit">
			<div class="viikonpaiva maanantai">
				<div class="ruokatext">@ruoka.Maanantai</div>
			</div>

			<div class="viikonpaiva tiistai">
				<div class="ruokatext">@ruoka.Tiistai</div>
			</div>

			<div class="viikonpaiva keskiviikko">
				<div class="ruokatext">@ruoka.Keskiviikko</div>
			</div>

			<div class="viikonpaiva torstai">
				<div class="ruokatext">@ruoka.Torstai</div>
			</div>

			<div class="viikonpaiva perjantai">
				<div class="ruokatext">@ruoka.Perjantai</div>
			</div>
		</div>



	</div>
		<input type="file" title="Lataa taustakuva" accept="image/*" onchange="showPreview(event)" style="
		position: fixed;
		top: 20px;
		left: 1100px;
	">

		<p  style="
			position: fixed;
			top: 40px;
			left: 1100px;
				">Viikon @ViewBag.Viikko ruokalista #isokyrö #kyrönmaanlukio #ruokalista #isokyröruokalista</p>

</body>
}

</html>
